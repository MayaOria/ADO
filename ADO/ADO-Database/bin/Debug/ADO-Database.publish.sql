/*
Deployment script for Theatre-DB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Theatre-DB"
:setvar DefaultFilePrefix "Theatre-DB"
:setvar DefaultDataPath "C:\Users\m.orianne\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\m.orianne\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[client]...';


GO
CREATE TABLE [dbo].[client] (
    [IdClient] INT            IDENTITY (1, 1) NOT NULL,
    [email]    NVARCHAR (255) NOT NULL,
    [pass]     VARBINARY (64) NOT NULL,
    [nom]      NVARCHAR (50)  NOT NULL,
    [prenom]   NVARCHAR (50)  NOT NULL,
    [adresse]  NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_Client] PRIMARY KEY CLUSTERED ([IdClient] ASC)
);


GO
PRINT N'Creating Index [dbo].[client].[UK_client_email]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UK_client_email]
    ON [dbo].[client]([email] ASC);


GO
PRINT N'Creating Table [dbo].[representation]...';


GO
CREATE TABLE [dbo].[representation] (
    [IdRepresentation]    INT      IDENTITY (1, 1) NOT NULL,
    [dateRepresentation]  DATE     NOT NULL,
    [heureRepresentation] TIME (7) NOT NULL,
    [idSpectacle]         INT      NOT NULL,
    CONSTRAINT [PK_Representation] PRIMARY KEY CLUSTERED ([IdRepresentation] ASC)
);


GO
PRINT N'Creating Table [dbo].[Spectacle]...';


GO
CREATE TABLE [dbo].[Spectacle] (
    [IdSpectacle] INT            IDENTITY (1, 1) NOT NULL,
    [nom]         NVARCHAR (50)  NOT NULL,
    [description] NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_Spectacle] PRIMARY KEY CLUSTERED ([IdSpectacle] ASC)
);


GO
PRINT N'Creating Index [dbo].[Spectacle].[UK_Spectacle_nom]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UK_Spectacle_nom]
    ON [dbo].[Spectacle]([nom] ASC);


GO
PRINT N'Creating Table [dbo].[ticket]...';


GO
CREATE TABLE [dbo].[ticket] (
    [IdTicket]         INT           IDENTITY (1, 1) NOT NULL,
    [dateTicket]       DATETIME2 (7) NOT NULL,
    [idClient]         INT           NOT NULL,
    [idRepresentation] INT           NOT NULL,
    [idType]           INT           NOT NULL,
    CONSTRAINT [PK_Ticket] PRIMARY KEY CLUSTERED ([IdTicket] ASC)
);


GO
PRINT N'Creating Table [dbo].[Type]...';


GO
CREATE TABLE [dbo].[Type] (
    [idType] INT           IDENTITY (1, 1) NOT NULL,
    [nom]    NVARCHAR (50) NOT NULL,
    [prix]   MONEY         NOT NULL,
    CONSTRAINT [PK_Type] PRIMARY KEY CLUSTERED ([idType] ASC)
);


GO
PRINT N'Creating Index [dbo].[Type].[UK_Type_nom]...';


GO
CREATE NONCLUSTERED INDEX [UK_Type_nom]
    ON [dbo].[Type]([nom] ASC);


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[ticket]...';


GO
ALTER TABLE [dbo].[ticket]
    ADD DEFAULT GETDATE() FOR [dateTicket];


GO
PRINT N'Creating Foreign Key [dbo].[FK_representation_spectacle]...';


GO
ALTER TABLE [dbo].[representation]
    ADD CONSTRAINT [FK_representation_spectacle] FOREIGN KEY ([idSpectacle]) REFERENCES [dbo].[Spectacle] ([IdSpectacle]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ticket_client]...';


GO
ALTER TABLE [dbo].[ticket]
    ADD CONSTRAINT [FK_ticket_client] FOREIGN KEY ([idClient]) REFERENCES [dbo].[client] ([IdClient]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ticket_representation]...';


GO
ALTER TABLE [dbo].[ticket]
    ADD CONSTRAINT [FK_ticket_representation] FOREIGN KEY ([idRepresentation]) REFERENCES [dbo].[representation] ([IdRepresentation]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ticket_type]...';


GO
ALTER TABLE [dbo].[ticket]
    ADD CONSTRAINT [FK_ticket_type] FOREIGN KEY ([idType]) REFERENCES [dbo].[Type] ([idType]);


GO
PRINT N'Creating Check Constraint [dbo].[CK_client_nom]...';


GO
ALTER TABLE [dbo].[client]
    ADD CONSTRAINT [CK_client_nom] CHECK (LEN([nom]) >= 1);


GO
PRINT N'Creating Check Constraint [dbo].[CK_client_prenom]...';


GO
ALTER TABLE [dbo].[client]
    ADD CONSTRAINT [CK_client_prenom] CHECK (LEN([nom]) >=1);


GO
PRINT N'Creating Check Constraint [dbo].[CK_Representation_date]...';


GO
ALTER TABLE [dbo].[representation]
    ADD CONSTRAINT [CK_Representation_date] CHECK ([dateRepresentation] > GETDATE());


GO
PRINT N'Creating Check Constraint [dbo].[CK_Spectacle_nom]...';


GO
ALTER TABLE [dbo].[Spectacle]
    ADD CONSTRAINT [CK_Spectacle_nom] CHECK (LEN([nom]) >=3);


GO
PRINT N'Creating Check Constraint [dbo].[CK_Type_prix]...';


GO
ALTER TABLE [dbo].[Type]
    ADD CONSTRAINT [CK_Type_prix] CHECK ([prix] > = 0);


GO
PRINT N'Creating View [dbo].[representationDetails]...';


GO
CREATE VIEW [dbo].[representationDetails]
	AS SELECT [idRepresentation],
			  [dateRepresentation],
			  [heureRepresentation],
			  
			  S.[nom] AS [nomSpectacle]
			  
			  
		FROM [representation] as R
			JOIN [spectacle] as S
			ON R.[idSpectacle] = S.[idSpectacle]
GO
PRINT N'Creating Procedure [dbo].[SP_ClientAdd]...';


GO
CREATE PROCEDURE [dbo].[SP_ClientAdd]
	@email VARCHAR (255),
	@pass NVARCHAR (32),
	@nom NVARCHAR (50),
	@prenom NVARCHAR (50),
	@adresse NVARCHAR (MAX)
AS
	INSERT INTO [client] ([email], [pass], [nom], [prenom], [adresse])
	OUTPUT [inserted].[idClient]
	VALUES (@email, @pass, @nom, @prenom, @adresse)
GO
PRINT N'Creating Procedure [dbo].[SP_ClientCheck]...';


GO
CREATE PROCEDURE [dbo].[SP_ClientCheck]
	@email NVARCHAR (255),
	@pass NVARCHAR(32)
AS
	SELECT [idClient]
	FROM [client]
	WHERE[email] = @email
		AND [pass] = HASHBYTES('SHA2_512', @pass)
GO
PRINT N'Creating Procedure [dbo].[SP_SpectacleAdd]...';


GO
CREATE PROCEDURE [dbo].[SP_SpectacleAdd]
	@nom NVARCHAR (50),
	@desc NVARCHAR (MAX)
AS
	INSERT INTO [spectacle] ([nom], [description])
	OUTPUT ([inserted].[idSpectacle])
	VALUES (@nom, @desc)
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'dad0af4c-90f3-46e0-b70d-6dc840c3bd83')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('dad0af4c-90f3-46e0-b70d-6dc840c3bd83')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c4fe6ea9-6bd7-476a-bb79-70f2c8a2f558')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c4fe6ea9-6bd7-476a-bb79-70f2c8a2f558')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f32f1a57-9976-43b1-b9db-5ed46481e2ba')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f32f1a57-9976-43b1-b9db-5ed46481e2ba')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '3fd4b6da-569a-4ed9-a4e1-de9f06928304')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('3fd4b6da-569a-4ed9-a4e1-de9f06928304')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '09f4090a-22fa-40f7-a3a9-b12a4f938c88')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('09f4090a-22fa-40f7-a3a9-b12a4f938c88')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
INSERT INTO [spectacle]([nom], [description])
VALUES (N'Inauguration', N'Ouverture du théâtre')

GO

INSERT INTO [type]([nom], [prix])
VALUES (N'Enfant', 5),
       (N'Etudiant', 8),
       (N'Adulte', 10)

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
